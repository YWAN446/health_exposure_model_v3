model {
  # hyperparameters
  # count data
  for(k.smpl in 1:n.smpl) {
    ec.conc[ind.env.smp[k.smpl,1]] ~ dgamma(ec.r[ind.env.smp[k.smpl,3]]+0.01,
                                            1/ec.lambda[ind.env.smp[k.smpl,1]]);
    for(k.repl in 1:ec.repl[ind.env.smp[k.smpl,1]]) {
      ec.data[ind.env.smp[k.smpl,1],k.repl,3] ~
        dinterval(ec.data[ind.env.smp[k.smpl,1],k.repl,1],censorlimit);
      ec.data[ind.env.smp[k.smpl,1],k.repl,1] ~
        dpois(ec.conc[ind.env.smp[k.smpl,1]]*
                ec.data[ind.env.smp[k.smpl,1],k.repl,2]);
    }
  }
  # microbial contamination
  # shape factor
  for (k.comb in 1:num.comb) {
    ec.logr[k.comb] ~ dnorm(mu.ec.logr[k.comb],1/sd.ec.logr^2);
    ec.r[k.comb] <- exp(ec.logr[k.comb]);
  }
  for (k.comb in 1:num.comb) {
    mu.ec.logr[k.comb]~dnorm(0,0.001);
  }
  sd.ec.logr~dunif(0.001,1000);
  
  # scale factor
  for(k.smpl in 1:n.smpl) {
    ec.lambda[k.smpl] <- exp(ec.loglambda[k.smpl]);
  }
  ec.loglambda~dmnorm(mu.lambda,tau.lambda)
  for (k.smpl in 1:n.smpl){
    mu.lambda[k.smpl]<-mu.lam[ind.env.smp[k.smpl,3]]
  }
  for (k.comb in 1:num.comb) {
    mu.lam[k.comb]~dnorm(0,0.001);
  }
  tau.lambda<-inverse(sigma.lambda);
  sigma.lambda<-sigma.lam %*% mat.corr %*% t(sigma.lam);
  for (k.smpl in 1:n.smpl){
    for (j.smpl in 1:n.smpl){
      sigma.lam[k.smpl,j.smpl]<-ifelse(k.smpl==j.smpl,sig.lam[ind.env.smp[k.smpl,3]],0)
    }
  }
  for (k.comb in 1:num.comb) {
    sig.lam[k.comb]~dunif(0,1000);
  }
} # end model
